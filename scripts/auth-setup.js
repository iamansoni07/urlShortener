// Authentication setup script for Affordmed evaluation
const https = require("https")
const fs = require("fs")
const path = require("path")

const API_BASE = "http://20.244.56.144/evaluation-service"

// Configuration - Update these values
const CONFIG = {
  email: "candidate@example.com",
  name: "Candidate Name",
  mobileNo: "1234567890",
  githubUsername: "candidate-github",
  rollNo: "ROLL123",
  accessCode: "PROVIDED_ACCESS_CODE",
}

async function makeRequest(url, data) {
  return new Promise((resolve, reject) => {
    const postData = JSON.stringify(data)

    const options = {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Content-Length": Buffer.byteLength(postData),
      },
    }

    const req = https.request(url, options, (res) => {
      let responseData = ""

      res.on("data", (chunk) => {
        responseData += chunk
      })

      res.on("end", () => {
        try {
          const parsed = JSON.parse(responseData)
          resolve({ status: res.statusCode, data: parsed })
        } catch (error) {
          reject(new Error(`Failed to parse response: ${error.message}`))
        }
      })
    })

    req.on("error", (error) => {
      reject(error)
    })

    req.write(postData)
    req.end()
  })
}

async function register() {
  console.log("🔐 Starting registration process...")

  try {
    const response = await makeRequest(`${API_BASE}/register`, CONFIG)

    if (response.status === 200 || response.status === 201) {
      console.log("✅ Registration successful!")
      console.log("📋 Response:", JSON.stringify(response.data, null, 2))

      // Save credentials
      const credentials = {
        clientID: response.data.clientID,
        clientSecret: response.data.clientSecret,
        email: response.data.email,
        name: response.data.name,
        rollNo: response.data.rollNo,
      }

      fs.writeFileSync(path.join(__dirname, "credentials.json"), JSON.stringify(credentials, null, 2))

      console.log("💾 Credentials saved to scripts/credentials.json")
      return credentials
    } else {
      throw new Error(`Registration failed with status ${response.status}: ${JSON.stringify(response.data)}`)
    }
  } catch (error) {
    console.error("❌ Registration failed:", error.message)
    throw error
  }
}

async function authenticate(credentials) {
  console.log("🔑 Starting authentication process...")

  const authData = {
    email: credentials.email,
    name: credentials.name,
    rollNo: credentials.rollNo,
    accessCode: CONFIG.accessCode,
    clientID: credentials.clientID,
    clientSecret: credentials.clientSecret,
  }

  try {
    const response = await makeRequest(`${API_BASE}/auth`, authData)

    if (response.status === 200) {
      console.log("✅ Authentication successful!")
      console.log("🎫 Access Token:", response.data.access_token)
      console.log("⏰ Expires in:", response.data.expires_in)

      // Save token to environment file
      const envContent = `# Generated by auth-setup.js
ACCESS_TOKEN=${response.data.access_token}
NEXT_PUBLIC_ACCESS_TOKEN=${response.data.access_token}
PORT=4000
`

      fs.writeFileSync(path.join(__dirname, "../.env.local"), envContent)
      fs.writeFileSync(path.join(__dirname, "../backend/.env"), `ACCESS_TOKEN=${response.data.access_token}\nPORT=4000`)

      console.log("💾 Environment variables saved to .env.local and backend/.env")
      return response.data.access_token
    } else {
      throw new Error(`Authentication failed with status ${response.status}: ${JSON.stringify(response.data)}`)
    }
  } catch (error) {
    console.error("❌ Authentication failed:", error.message)
    throw error
  }
}

async function main() {
  try {
    console.log("🚀 Affordmed Evaluation Setup")
    console.log("================================")

    // Check if credentials already exist
    const credentialsPath = path.join(__dirname, "credentials.json")
    let credentials

    if (fs.existsSync(credentialsPath)) {
      console.log("📁 Found existing credentials, skipping registration...")
      credentials = JSON.parse(fs.readFileSync(credentialsPath, "utf8"))
    } else {
      credentials = await register()
    }

    // Authenticate and get token
    const accessToken = await authenticate(credentials)

    console.log("")
    console.log("🎉 Setup completed successfully!")
    console.log("📝 Next steps:")
    console.log("   1. Start the backend: npm run backend:dev")
    console.log("   2. Start the frontend: npm run dev")
    console.log("   3. Test the integration: npm run test:integration")
  } catch (error) {
    console.error("💥 Setup failed:", error.message)
    process.exit(1)
  }
}

if (require.main === module) {
  main()
}

module.exports = { register, authenticate }
